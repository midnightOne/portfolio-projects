generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Project {
  id                  String                   @id @default(cuid())
  title               String                   @db.VarChar(255)
  slug                String                   @unique @db.VarChar(255)
  description         String?
  briefOverview       String?
  workDate            DateTime?
  status              ProjectStatus            @default(DRAFT)
  visibility          ProjectVisibility        @default(PUBLIC)
  viewCount           Int                      @default(0)
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  searchVector        String?
  thumbnailImageId    String?
  metadataImageId     String?
  search_vector       Unsupported("tsvector")?
  articleContent      ArticleContent?
  downloadableFiles   DownloadableFile[]
  externalLinks       ExternalLink[]
  interactiveExamples InteractiveExample[]
  carousels           MediaCarousel[]
  mediaItems          MediaItem[]              @relation("ProjectMedia")
  analytics           ProjectAnalytics[]
  referencedBy        ProjectReference[]       @relation("ReferencedProject")
  projectReferences   ProjectReference[]       @relation("ReferencingProject")
  metadataImage       MediaItem?               @relation("ProjectMetadata", fields: [metadataImageId], references: [id])
  thumbnailImage      MediaItem?               @relation("ProjectThumbnail", fields: [thumbnailImageId], references: [id])
  tags                Tag[]                    @relation("ProjectTags")
  aiConversations     AIConversation[]
  contentVersions     ContentVersion[]

  @@index([status, visibility])
  @@index([workDate])
  @@index([viewCount])
  @@index([slug])
  @@index([search_vector], type: Gin)
  @@map("projects")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique @db.VarChar(100)
  color     String?   @db.VarChar(7)
  createdAt DateTime  @default(now())
  projects  Project[] @relation("ProjectTags")

  @@index([name])
  @@index([id], map: "idx_tags_id")
  @@map("tags")
}

model MediaItem {
  id                   String          @id @default(cuid())
  projectId            String?
  type                 MediaType
  url                  String          @db.VarChar(500)
  thumbnailUrl         String?         @db.VarChar(500)
  altText              String?         @db.VarChar(255)
  description          String?
  width                Int?
  height               Int?
  fileSize             BigInt?
  displayOrder         Int             @default(0)
  createdAt            DateTime        @default(now())
  carouselImages       CarouselImage[]
  embeddedMedia        EmbeddedMedia[]
  project              Project?        @relation("ProjectMedia", fields: [projectId], references: [id], onDelete: Cascade)
  metadataForProjects  Project[]       @relation("ProjectMetadata")
  thumbnailForProjects Project[]       @relation("ProjectThumbnail")

  @@index([projectId])
  @@index([type])
  @@index([displayOrder])
  @@map("media_items")
}

model ArticleContent {
  id            String          @id @default(cuid())
  projectId     String          @unique
  content       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  embeddedMedia EmbeddedMedia[]

  @@map("article_content")
}

model EmbeddedMedia {
  id               String         @id @default(cuid())
  articleContentId String
  mediaItemId      String
  position         Int
  caption          String?
  articleContent   ArticleContent @relation(fields: [articleContentId], references: [id], onDelete: Cascade)
  mediaItem        MediaItem      @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)

  @@index([articleContentId])
  @@index([position])
  @@map("embedded_media")
}

model MediaCarousel {
  id           String          @id @default(cuid())
  projectId    String
  title        String?         @db.VarChar(255)
  description  String?
  displayOrder Int             @default(0)
  createdAt    DateTime        @default(now())
  images       CarouselImage[]
  project      Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([displayOrder])
  @@map("media_carousels")
}

model CarouselImage {
  id          String        @id @default(cuid())
  carouselId  String
  mediaItemId String
  description String?
  order       Int           @default(0)
  carousel    MediaCarousel @relation(fields: [carouselId], references: [id], onDelete: Cascade)
  mediaItem   MediaItem     @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)

  @@index([carouselId])
  @@index([order])
  @@map("carousel_images")
}

model InteractiveExample {
  id               String          @id @default(cuid())
  projectId        String
  type             InteractiveType
  title            String          @db.VarChar(255)
  description      String?
  url              String?         @db.VarChar(500)
  embedCode        String?
  fallbackContent  String?
  securitySettings Json?
  displayOrder     Int             @default(0)
  createdAt        DateTime        @default(now())
  project          Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([type])
  @@index([displayOrder])
  @@map("interactive_examples")
}

model DownloadableFile {
  id           String   @id @default(cuid())
  projectId    String
  filename     String   @db.VarChar(255)
  originalName String   @db.VarChar(255)
  fileType     String   @db.VarChar(100)
  fileSize     BigInt
  downloadUrl  String   @db.VarChar(500)
  description  String?
  uploadDate   DateTime @default(now())
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([fileType])
  @@index([projectId], map: "idx_downloadable_files_project_id")
  @@map("downloadable_files")
}

model ExternalLink {
  id          String   @id @default(cuid())
  projectId   String
  label       String   @db.VarChar(255)
  url         String   @db.VarChar(500)
  icon        String?  @db.VarChar(50)
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([order])
  @@index([projectId], map: "idx_external_links_project_id")
  @@map("external_links")
}

model ProjectReference {
  id                   String   @id @default(cuid())
  referencingProjectId String
  referencedProjectId  String
  context              String?
  createdAt            DateTime @default(now())
  referencedProject    Project  @relation("ReferencedProject", fields: [referencedProjectId], references: [id], onDelete: Cascade)
  referencingProject   Project  @relation("ReferencingProject", fields: [referencingProjectId], references: [id], onDelete: Cascade)

  @@unique([referencingProjectId, referencedProjectId])
  @@index([referencingProjectId])
  @@index([referencedProjectId])
  @@map("project_references")
}

model ProjectAnalytics {
  id        String         @id @default(cuid())
  projectId String
  event     AnalyticsEvent
  timestamp DateTime       @default(now())
  userAgent String?
  ipAddress String?        @db.VarChar(45)
  metadata  Json?
  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([event])
  @@index([timestamp])
  @@map("project_analytics")
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED

  @@map("project_status")
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
  UNLISTED

  @@map("project_visibility")
}

enum MediaType {
  IMAGE
  VIDEO
  GIF
  WEBM
  AUDIO
  DOCUMENT

  @@map("media_type")
}

enum InteractiveType {
  CANVAS
  IFRAME
  WEBXR
  EMBED

  @@map("interactive_type")
}

enum AnalyticsEvent {
  VIEW
  DOWNLOAD
  EXTERNAL_LINK_CLICK
  INTERACTIVE_ENGAGE

  @@map("analytics_event")
}

model AISettings {
  id                    String   @id @default(cuid())
  anthropicApiKey       String?  // Encrypted
  openaiApiKey          String?  // Encrypted
  systemPrompt          String   @default("You are an expert content editor for portfolio projects. Help improve and edit project content while maintaining the author's voice and style.")
  preferredProvider     String   @default("anthropic") // 'anthropic' | 'openai'
  preferredModel        String   @default("claude-3-5-sonnet-20241022")
  temperature           Float    @default(0.7)
  maxTokens             Int      @default(4000)
  dailyCostLimit        Float    @default(10.0)
  monthlyTokenLimit     Int      @default(100000)
  conversationHistory   Boolean  @default(true)
  autoSaveInterval      Int      @default(60) // seconds
  maxVersionsPerProject Int      @default(20)
  autoDeleteOldVersions Boolean  @default(true)
  versionRetentionDays  Int      @default(30)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("ai_settings")
}

model AIConversation {
  id              String           @id @default(cuid())
  projectId       String
  title           String?          @db.VarChar(255)
  createdAt       DateTime         @default(now())
  lastActiveAt    DateTime         @updatedAt
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages        AIMessage[]
  contentVersions ContentVersion[]

  @@index([projectId])
  @@index([lastActiveAt])
  @@map("ai_conversations")
}

model AIMessage {
  id             String         @id @default(cuid())
  conversationId String
  role           String         // 'user' | 'assistant' | 'system'
  content        String
  timestamp      DateTime       @default(now())
  model          String?
  tokens         Int?
  context        Json?
  conversation   AIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([timestamp])
  @@map("ai_messages")
}

model ContentVersion {
  id                  String         @id @default(cuid())
  projectId           String
  versionNumber       Int
  contentSnapshot     Json           // Full project state
  changeSummary       String?
  changedBy           String         @default("user") // 'user' | 'ai'
  aiConversationId    String?
  createdAt           DateTime       @default(now())
  project             Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  aiConversation      AIConversation? @relation(fields: [aiConversationId], references: [id], onDelete: SetNull)

  @@unique([projectId, versionNumber])
  @@index([projectId])
  @@index([createdAt])
  @@map("content_versions")
}
