generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Project {
  id                  String                   @id @default(cuid())
  title               String                   @db.VarChar(255)
  slug                String                   @unique @db.VarChar(255)
  description         String?
  briefOverview       String?
  workDate            DateTime?
  status              ProjectStatus            @default(DRAFT)
  visibility          ProjectVisibility        @default(PUBLIC)
  viewCount           Int                      @default(0)
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  searchVector        String?
  thumbnailImageId    String?
  metadataImageId     String?
  search_vector       Unsupported("tsvector")?
  articleContent      ArticleContent?
  downloadableFiles   DownloadableFile[]
  externalLinks       ExternalLink[]
  interactiveExamples InteractiveExample[]
  carousels           MediaCarousel[]
  mediaItems          MediaItem[]              @relation("ProjectMedia")
  aiIndex             ProjectAIIndex?
  analytics           ProjectAnalytics[]
  referencedBy        ProjectReference[]       @relation("ReferencedProject")
  projectReferences   ProjectReference[]       @relation("ReferencingProject")
  metadataImage       MediaItem?               @relation("ProjectMetadata", fields: [metadataImageId], references: [id])
  thumbnailImage      MediaItem?               @relation("ProjectThumbnail", fields: [thumbnailImageId], references: [id])
  tags                Tag[]                    @relation("ProjectTags")

  @@index([status, visibility])
  @@index([workDate])
  @@index([viewCount])
  @@index([slug])
  @@index([search_vector], type: Gin)
  @@map("projects")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique @db.VarChar(100)
  color     String?   @db.VarChar(7)
  createdAt DateTime  @default(now())
  projects  Project[] @relation("ProjectTags")

  @@index([name])
  @@index([id], map: "idx_tags_id")
  @@map("tags")
}

model MediaItem {
  id                   String          @id @default(cuid())
  projectId            String?
  type                 MediaType
  url                  String          @db.VarChar(500)
  thumbnailUrl         String?         @db.VarChar(500)
  altText              String?         @db.VarChar(255)
  description          String?
  width                Int?
  height               Int?
  fileSize             BigInt?
  displayOrder         Int             @default(0)
  createdAt            DateTime        @default(now())
  carouselImages       CarouselImage[]
  embeddedMedia        EmbeddedMedia[]
  project              Project?        @relation("ProjectMedia", fields: [projectId], references: [id], onDelete: Cascade)
  metadataForProjects  Project[]       @relation("ProjectMetadata")
  thumbnailForProjects Project[]       @relation("ProjectThumbnail")

  @@index([projectId])
  @@index([type])
  @@index([displayOrder])
  @@map("media_items")
}

model ArticleContent {
  id            String          @id @default(cuid())
  projectId     String          @unique
  content       String
  jsonContent   Json?
  contentType   String          @default("text") @db.VarChar(20)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  embeddedMedia EmbeddedMedia[]

  @@index([contentType])
  @@map("article_content")
}

model EmbeddedMedia {
  id               String         @id @default(cuid())
  articleContentId String
  mediaItemId      String
  position         Int
  caption          String?
  articleContent   ArticleContent @relation(fields: [articleContentId], references: [id], onDelete: Cascade)
  mediaItem        MediaItem      @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)

  @@index([articleContentId])
  @@index([position])
  @@map("embedded_media")
}

model MediaCarousel {
  id           String          @id @default(cuid())
  projectId    String
  title        String?         @db.VarChar(255)
  description  String?
  displayOrder Int             @default(0)
  createdAt    DateTime        @default(now())
  images       CarouselImage[]
  project      Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([displayOrder])
  @@map("media_carousels")
}

model CarouselImage {
  id          String        @id @default(cuid())
  carouselId  String
  mediaItemId String
  description String?
  order       Int           @default(0)
  carousel    MediaCarousel @relation(fields: [carouselId], references: [id], onDelete: Cascade)
  mediaItem   MediaItem     @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)

  @@index([carouselId])
  @@index([order])
  @@map("carousel_images")
}

model InteractiveExample {
  id               String          @id @default(cuid())
  projectId        String
  type             InteractiveType
  title            String          @db.VarChar(255)
  description      String?
  url              String?         @db.VarChar(500)
  embedCode        String?
  fallbackContent  String?
  securitySettings Json?
  displayOrder     Int             @default(0)
  createdAt        DateTime        @default(now())
  project          Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([type])
  @@index([displayOrder])
  @@map("interactive_examples")
}

model DownloadableFile {
  id           String   @id @default(cuid())
  projectId    String
  filename     String   @db.VarChar(255)
  originalName String   @db.VarChar(255)
  fileType     String   @db.VarChar(100)
  fileSize     BigInt
  downloadUrl  String   @db.VarChar(500)
  description  String?
  uploadDate   DateTime @default(now())
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([fileType])
  @@map("downloadable_files")
}

model ExternalLink {
  id          String   @id @default(cuid())
  projectId   String
  label       String   @db.VarChar(255)
  url         String   @db.VarChar(500)
  icon        String?  @db.VarChar(50)
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([order])
  @@map("external_links")
}

model ProjectReference {
  id                   String   @id @default(cuid())
  referencingProjectId String
  referencedProjectId  String
  context              String?
  createdAt            DateTime @default(now())
  referencedProject    Project  @relation("ReferencedProject", fields: [referencedProjectId], references: [id], onDelete: Cascade)
  referencingProject   Project  @relation("ReferencingProject", fields: [referencingProjectId], references: [id], onDelete: Cascade)

  @@unique([referencingProjectId, referencedProjectId])
  @@index([referencingProjectId])
  @@index([referencedProjectId])
  @@index([referencedProjectId], map: "project_refs_referenced_idx")
  @@index([referencingProjectId], map: "project_refs_referencing_idx")
  @@map("project_references")
}

model ProjectAnalytics {
  id        String         @id @default(cuid())
  projectId String
  event     AnalyticsEvent
  timestamp DateTime       @default(now())
  userAgent String?
  ipAddress String?        @db.VarChar(45)
  metadata  Json?
  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([event])
  @@index([timestamp])
  @@map("project_analytics")
}

model AIModelConfig {
  id        String   @id @default(cuid())
  provider  String   @unique
  models    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([provider])
  @@map("ai_model_config")
}

model AIGeneralSettings {
  id              String   @id @default(cuid())
  defaultProvider String   @default("openai")
  systemPrompt    String   @default("You are an expert content editor for portfolio projects. Help improve and edit project content while maintaining the author's voice and style.")
  temperature     Float    @default(0.7)
  maxTokens       Int      @default(4000)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("ai_general_settings")
}

model ProjectAIIndex {
  projectId     String   @id @db.VarChar(255)
  summary       String
  keywords      Json     @default("[]")
  topics        Json     @default("[]")
  technologies  Json     @default("[]")
  sectionsCount Int      @default(0)
  mediaCount    Int      @default(0)
  contentHash   String?  @db.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([contentHash])
  @@index([updatedAt])
  @@index([keywords], type: Gin)
  @@index([topics], type: Gin)
  @@index([technologies], type: Gin)
  @@map("project_ai_index")
}

model AIContentSourceConfig {
  id         String   @id @default(cuid())
  sourceId   String   @unique
  providerId String
  enabled    Boolean  @default(true)
  priority   Int      @default(50)
  config     Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([sourceId])
  @@index([enabled])
  @@index([priority])
  @@map("ai_content_source_config")
}

model HomepageConfig {
  id             String          @id @default(cuid())
  sections       Json
  globalTheme    String          @default("default")
  layout         String          @default("standard")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sectionConfigs SectionConfig[]

  @@map("homepage_config")
}

model SectionConfig {
  id               String         @id @default(cuid())
  homepageConfigId String
  sectionId        String
  type             String
  enabled          Boolean        @default(true)
  order            Int
  config           Json
  className        String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  homepageConfig   HomepageConfig @relation(fields: [homepageConfigId], references: [id], onDelete: Cascade)

  @@unique([homepageConfigId, sectionId])
  @@index([homepageConfigId])
  @@index([order])
  @@map("section_configs")
}

model AIRateLimit {
  id             String     @id @default(cuid())
  identifier     String
  identifierType String     @map("identifier_type")
  requestsCount  Int        @default(0) @map("requests_count")
  windowStart    DateTime   @map("window_start")
  windowEnd      DateTime   @map("window_end")
  reflinkId      String?    @map("reflink_id")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  reflink        AIReflink? @relation(fields: [reflinkId], references: [id])

  @@unique([identifier, identifierType, windowStart], name: "ai_rate_limits_identifier_window_idx")
  @@index([windowEnd])
  @@index([reflinkId])
  @@map("ai_rate_limits")
}

model AIReflink {
  id                       String           @id @default(cuid())
  code                     String           @unique
  name                     String?
  description              String?
  rateLimitTier            String           @default("standard") @map("rate_limit_tier")
  dailyLimit               Int              @default(50) @map("daily_limit")
  expiresAt                DateTime?        @map("expires_at")
  isActive                 Boolean          @default(true) @map("is_active")
  createdBy                String?          @map("created_by")
  createdAt                DateTime         @default(now()) @map("created_at")
  updatedAt                DateTime         @updatedAt @map("updated_at")
  customContext            String?          @map("custom_context")
  enableAdvancedNavigation Boolean          @default(true) @map("enable_advanced_navigation")
  enableJobAnalysis        Boolean          @default(true) @map("enable_job_analysis")
  enableVoiceAI            Boolean          @default(true) @map("enable_voice_ai")
  lastUsedAt               DateTime?        @map("last_used_at")
  recipientEmail           String?          @map("recipient_email") @db.VarChar(255)
  recipientName            String?          @map("recipient_name") @db.VarChar(255)
  spendLimit               Decimal?         @map("spend_limit") @db.Decimal(10, 2)
  spendUsed                Decimal          @default(0.00) @map("spend_used") @db.Decimal(10, 2)
  tokenLimit               Int?             @map("token_limit")
  tokensUsed               Int              @default(0) @map("tokens_used")
  conversations            AIConversation[]
  jobAnalyses              AIJobAnalysis[]
  usageLogs                AIRateLimitLog[]
  rateLimits               AIRateLimit[]
  aiUsageLogs              AIUsageLog[]

  @@index([isActive])
  @@index([expiresAt])
  @@index([recipientEmail])
  @@map("ai_reflinks")
}

model AIIPBlacklist {
  id               String    @id @default(cuid())
  ipAddress        String    @unique @map("ip_address")
  reason           String
  violationCount   Int       @default(1) @map("violation_count")
  firstViolationAt DateTime  @default(now()) @map("first_violation_at")
  lastViolationAt  DateTime  @default(now()) @map("last_violation_at")
  blockedAt        DateTime  @default(now()) @map("blocked_at")
  canReinstate     Boolean   @default(true) @map("can_reinstate")
  reinstatedAt     DateTime? @map("reinstated_at")
  reinstatedBy     String?   @map("reinstated_by")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@index([blockedAt])
  @@map("ai_ip_blacklist")
}

model AIRateLimitLog {
  id                String     @id @default(cuid())
  identifier        String
  identifierType    String     @map("identifier_type")
  reflinkId         String?    @map("reflink_id")
  endpoint          String
  userAgent         String?    @map("user_agent")
  ipAddress         String?    @map("ip_address")
  wasBlocked        Boolean    @default(false) @map("was_blocked")
  requestsRemaining Int?       @map("requests_remaining")
  timestamp         DateTime   @default(now())
  reflink           AIReflink? @relation(fields: [reflinkId], references: [id])

  @@index([identifier, identifierType])
  @@index([timestamp])
  @@index([reflinkId])
  @@index([wasBlocked])
  @@map("ai_rate_limit_logs")
}

model AIUsageLog {
  id         String     @id @default(cuid())
  reflinkId  String?    @map("reflink_id")
  sessionId  String?    @map("session_id")
  usageType  String     @map("usage_type")
  tokensUsed Int?       @map("tokens_used")
  costUsd    Decimal    @map("cost_usd") @db.Decimal(10, 4)
  modelUsed  String?    @map("model_used")
  endpoint   String?
  metadata   Json       @default("{}")
  timestamp  DateTime   @default(now())
  reflink    AIReflink? @relation(fields: [reflinkId], references: [id])

  @@index([reflinkId])
  @@index([timestamp])
  @@index([usageType])
  @@map("ai_usage_logs")
}

model AIConversation {
  id            String                  @id @default(cuid())
  reflinkId     String?                 @map("reflink_id")
  sessionId     String                  @map("session_id")
  messageCount  Int                     @default(0) @map("message_count")
  totalTokens   Int                     @default(0) @map("total_tokens")
  totalCost     Decimal                 @default(0.0000) @map("total_cost") @db.Decimal(10, 4)
  startedAt     DateTime                @default(now()) @map("started_at")
  lastMessageAt DateTime?               @map("last_message_at")
  metadata      Json                    @default("{}")
  messages      AIConversationMessage[]
  reflink       AIReflink?              @relation(fields: [reflinkId], references: [id])

  @@index([reflinkId])
  @@index([sessionId])
  @@index([startedAt])
  @@map("ai_conversations")
}

model AIConversationMessage {
  id             String         @id @default(cuid())
  conversationId String         @map("conversation_id")
  role           String
  content        String
  tokensUsed     Int?           @map("tokens_used")
  costUsd        Decimal?       @map("cost_usd") @db.Decimal(10, 4)
  modelUsed      String?        @map("model_used")
  transportMode  String?        @map("transport_mode")
  timestamp      DateTime       @default(now())
  metadata       Json           @default("{}")
  conversation   AIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([timestamp])
  @@index([role])
  @@map("ai_conversation_messages")
}

model AIJobAnalysis {
  id               String     @id @default(cuid())
  reflinkId        String?    @map("reflink_id")
  sessionId        String?    @map("session_id")
  jobSpecification String     @map("job_specification")
  companyName      String?    @map("company_name")
  positionTitle    String?    @map("position_title")
  analysisResult   Json       @map("analysis_result")
  tokensUsed       Int?       @map("tokens_used")
  costUsd          Decimal?   @map("cost_usd") @db.Decimal(10, 4)
  createdAt        DateTime   @default(now()) @map("created_at")
  metadata         Json       @default("{}")
  reflink          AIReflink? @relation(fields: [reflinkId], references: [id])

  @@index([reflinkId])
  @@index([createdAt])
  @@index([companyName])
  @@map("ai_job_analyses")
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED

  @@map("project_status")
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
  UNLISTED

  @@map("project_visibility")
}

enum MediaType {
  IMAGE
  VIDEO
  GIF
  WEBM
  AUDIO
  DOCUMENT

  @@map("media_type")
}

enum InteractiveType {
  CANVAS
  IFRAME
  WEBXR
  EMBED

  @@map("interactive_type")
}

enum AnalyticsEvent {
  VIEW
  DOWNLOAD
  EXTERNAL_LINK_CLICK
  INTERACTIVE_ENGAGE

  @@map("analytics_event")
}

enum AIRateLimitTier {
  BASIC
  STANDARD
  PREMIUM
  UNLIMITED

  @@map("ai_rate_limit_tier")
}
