// Portfolio Projects Database Schema
// Supports multiple database providers: PostgreSQL (Supabase, Vercel Postgres, local)

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Support for connection pooling with Supabase/Vercel
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// CORE MODELS
// ============================================================================

model Project {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  slug        String   @unique @db.VarChar(255)
  description String?  @db.Text
  briefOverview String? @db.Text
  workDate    DateTime?
  status      ProjectStatus @default(DRAFT)
  visibility  ProjectVisibility @default(PUBLIC)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Full-text search vector
  searchVector String? @db.Text

  // Media relationships
  thumbnailImageId String?
  thumbnailImage   MediaItem? @relation("ProjectThumbnail", fields: [thumbnailImageId], references: [id], onDelete: SetNull)
  
  metadataImageId String?
  metadataImage   MediaItem? @relation("ProjectMetadata", fields: [metadataImageId], references: [id], onDelete: SetNull)

  // Relationships
  tags                Tag[]                @relation("ProjectTags")
  mediaItems          MediaItem[]          @relation("ProjectMedia")
  articleContent      ArticleContent?
  interactiveExamples InteractiveExample[]
  externalLinks       ExternalLink[]
  downloadableFiles   DownloadableFile[]
  carousels           MediaCarousel[]
  projectReferences   ProjectReference[]   @relation("ReferencingProject")
  referencedBy        ProjectReference[]   @relation("ReferencedProject")
  analytics           ProjectAnalytics[]

  @@map("projects")
  @@index([status, visibility])
  @@index([workDate])
  @@index([viewCount])
  @@index([slug])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(100)
  color     String?  @db.VarChar(7) // Hex color
  createdAt DateTime @default(now())

  // Relationships
  projects Project[] @relation("ProjectTags")

  @@map("tags")
  @@index([name])
}

model MediaItem {
  id           String    @id @default(cuid())
  projectId    String?
  type         MediaType
  url          String    @db.VarChar(500)
  thumbnailUrl String?   @db.VarChar(500)
  altText      String?   @db.VarChar(255)
  description  String?   @db.Text
  width        Int?
  height       Int?
  fileSize     BigInt?
  displayOrder Int       @default(0)
  createdAt    DateTime  @default(now())

  // Relationships
  project              Project?        @relation("ProjectMedia", fields: [projectId], references: [id], onDelete: Cascade)
  thumbnailForProjects Project[]       @relation("ProjectThumbnail")
  metadataForProjects  Project[]       @relation("ProjectMetadata")
  carouselImages       CarouselImage[]
  embeddedMedia        EmbeddedMedia[]

  @@map("media_items")
  @@index([projectId])
  @@index([type])
  @@index([displayOrder])
}

// ============================================================================
// CONTENT MODELS
// ============================================================================

model ArticleContent {
  id        String   @id @default(cuid())
  projectId String   @unique
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  embeddedMedia EmbeddedMedia[]

  @@map("article_content")
}

model EmbeddedMedia {
  id               String  @id @default(cuid())
  articleContentId String
  mediaItemId      String
  position         Int
  caption          String? @db.Text

  // Relationships
  articleContent ArticleContent @relation(fields: [articleContentId], references: [id], onDelete: Cascade)
  mediaItem      MediaItem      @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)

  @@map("embedded_media")
  @@index([articleContentId])
  @@index([position])
}

model MediaCarousel {
  id           String   @id @default(cuid())
  projectId    String
  title        String?  @db.VarChar(255)
  description  String?  @db.Text
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())

  // Relationships
  project Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  images  CarouselImage[]

  @@map("media_carousels")
  @@index([projectId])
  @@index([displayOrder])
}

model CarouselImage {
  id          String  @id @default(cuid())
  carouselId  String
  mediaItemId String
  description String? @db.Text
  order       Int     @default(0)

  // Relationships
  carousel  MediaCarousel @relation(fields: [carouselId], references: [id], onDelete: Cascade)
  mediaItem MediaItem     @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)

  @@map("carousel_images")
  @@index([carouselId])
  @@index([order])
}

// ============================================================================
// INTERACTIVE CONTENT
// ============================================================================

model InteractiveExample {
  id               String                    @id @default(cuid())
  projectId        String
  type             InteractiveType
  title            String                    @db.VarChar(255)
  description      String?                   @db.Text
  url              String?                   @db.VarChar(500)
  embedCode        String?                   @db.Text
  fallbackContent  String?                   @db.Text
  securitySettings Json?
  displayOrder     Int                       @default(0)
  createdAt        DateTime                  @default(now())

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("interactive_examples")
  @@index([projectId])
  @@index([type])
  @@index([displayOrder])
}

// ============================================================================
// DOWNLOADS AND LINKS
// ============================================================================

model DownloadableFile {
  id           String   @id @default(cuid())
  projectId    String
  filename     String   @db.VarChar(255)
  originalName String   @db.VarChar(255)
  fileType     String   @db.VarChar(100)
  fileSize     BigInt
  downloadUrl  String   @db.VarChar(500)
  description  String?  @db.Text
  uploadDate   DateTime @default(now())

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("downloadable_files")
  @@index([projectId])
  @@index([fileType])
}

model ExternalLink {
  id          String   @id @default(cuid())
  projectId   String
  label       String   @db.VarChar(255)
  url         String   @db.VarChar(500)
  icon        String?  @db.VarChar(50)
  description String?  @db.Text
  order       Int      @default(0)
  createdAt   DateTime @default(now())

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("external_links")
  @@index([projectId])
  @@index([order])
}

// ============================================================================
// PROJECT REFERENCES
// ============================================================================

model ProjectReference {
  id                  String   @id @default(cuid())
  referencingProjectId String
  referencedProjectId String
  context             String?  @db.Text
  createdAt           DateTime @default(now())

  // Relationships
  referencingProject Project @relation("ReferencingProject", fields: [referencingProjectId], references: [id], onDelete: Cascade)
  referencedProject  Project @relation("ReferencedProject", fields: [referencedProjectId], references: [id], onDelete: Cascade)

  @@map("project_references")
  @@unique([referencingProjectId, referencedProjectId])
  @@index([referencingProjectId])
  @@index([referencedProjectId])
}

// ============================================================================
// ANALYTICS
// ============================================================================

model ProjectAnalytics {
  id        String   @id @default(cuid())
  projectId String
  event     AnalyticsEvent
  timestamp DateTime @default(now())
  userAgent String?  @db.Text
  ipAddress String?  @db.VarChar(45)
  metadata  Json?

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_analytics")
  @@index([projectId])
  @@index([event])
  @@index([timestamp])
}

// ============================================================================
// ENUMS
// ============================================================================

enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED

  @@map("project_status")
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
  UNLISTED

  @@map("project_visibility")
}

enum MediaType {
  IMAGE
  VIDEO
  GIF
  WEBM
  AUDIO
  DOCUMENT

  @@map("media_type")
}

enum InteractiveType {
  CANVAS
  IFRAME
  WEBXR
  EMBED

  @@map("interactive_type")
}

enum AnalyticsEvent {
  VIEW
  DOWNLOAD
  EXTERNAL_LINK_CLICK
  INTERACTIVE_ENGAGE

  @@map("analytics_event")
}
